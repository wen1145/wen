20:46 2024/11/16
sort(a , a+sizeof(a)/sizeof(a[0]))      // 要在sort函数中表明起末位置
sort函数默认将一个数组从小到大排序




18:42 2024/11/19
代码中的主要问题是在Inverse函数中使用strcpy来交换字符串的部分。
strcpy用于复制整个字符串，而不是单个字符。
此外，strcpy需要目标缓冲区足够大以存储源字符串，
而在这个情况下，我们只需要交换两个字符，因此不需要使用strcpy。

20:52 2024/12/1
 sample[strcspn(sample, "\n")] = 0;
可以将字符数组sample的换行符换为‘0’；
（（（这个换行符是由fgets()读入的）））

20:49 2024/12/4
宏定义的那一条语句不需要加分号
例如： #define 5 M     (这里的结尾不需要加分号！！！！！！

18:59 2024/12/11
bool fun(long long num) {
    // 计算平方根并转换为整数
    long long root = static_cast<long long>(sqrt(num));
    // 检查平方根的平方是否等于原数
    return root * root == num;  // true  or  false!!!!!!!!!!!!!!!!!!!!!!!!!
}


21:55 2024/12/15
#include<stdio.h>
typedef struct juzhen
 {
     int row;        //行
     int col;        //列
     int value;        //元素值
 }JuZhen;
//struct juzhen a[MAX_TERM];        //存放转置前的矩阵（只存元素数值不为零的元素对应的行、列下标和值）
//struct juzhen b[MAX_TERM];        //存放转置后的矩阵（同上）
void show(struct juzhen c[],int count_a)            //显示稀疏矩阵a, count_a是a里元素的个数
{ 
    printf(" i row col val\n");
    for(int i=0;i<count_a-1;i++)
    {
        for(int j=0;j<count_a-1-i;j++)
        {
            if(c[j+1].row<c[j].row)
            {
                int temp;
                
            }
        }
    }
    for(int i=0;i<count_a;i++)
    {
        printf(" %d|  %d   %d   %d\n",i+1,c[i].row,c[i].col,c[i].value);
    }
    
}
void zhuanzhi(struct juzhen a[],struct juzhen b[],int count_a) 
{
    for(int i=0;i<count_a;i++)
    {
        b[i].row=a[count_a-1-i].col;
        b[i].col=a[count_a-1-i].row;
        b[i].value=a[count_a-1-i].value;
    }
}           //将a矩阵转置到矩阵b
void init(struct juzhen a[],int rows, int cols,int count)
{
    for(int i=0;i<count;i++)
    {
        int row1,col1,number;
        printf("please input the row,col and value\n");
        fflush(stdout);
        
        scanf("%d,%d,%d",&row1,&col1,&number);
        
        a[i].row=row1;
        a[i].col=col1;
        a[i].value=number;
        while (getchar() != '\n');   ///////////////////////////     读取缓冲区中的换行符，用在scanf后面。

    }
}  
int main(void)
{
    int rows,cols,count_a;
    printf("please input the number of rows,cols and values\n");
    
    scanf("%d,%d,%d",&rows,&cols,&count_a);
    while (getchar() != '\n');    ///////////////////////////     读取缓冲区中的换行符
    struct juzhen a[count_a];
    init(a,rows,cols,count_a);
    show(a,count_a);
    printf("\n");
    struct juzhen b[count_a];
    zhuanzhi(a,b,count_a);
    show(b,count_a);
    return 0;
}


15:38 2024/12/17
这些错误和警告是由于结构体 struct date_rec 的声明位置不正确导致的。在 C 语言中，如果你在函数参数列表中声明一个结构体，那么这个结构体的声明只在该函数的参数列表中有效。因此，当你在其他地方使用这个结构体时，编译器会认为它是一个全新的、不同的类型，即使它们的名称相同。

要解决这个问题，你需要确保 struct date_rec 在所有使用它的函数之前就已经被声明。通常，这意味着你应该在任何函数之前声明结构体。


0:06 2024/12/24
int a[51];
for (int i = 0; i < 51; i++) {
    // 访问 a[i]
}
for (int i = 1; i <= 50; i++) {
    // 这将尝试访问 a[51]，这是越界
}

20:32 2024/12/26

///////////////////////        链表的反转
#include <stdio.h>
#include <stdlib.h>

struct link {
    int data;
    struct link *next;
};

// 函数声明
struct link *createList(void);
void displayList(struct link *head);
struct link *reverseList(struct link *head);

int main() {
    struct link *head = NULL;
    struct link *reversedHead = NULL;

    // 创建链表
    printf("\n请输入链表（非数表示结束）\n");
    head = createList();

    // 显示原始链表
    printf("\n原来表：\n");
    displayList(head);

    // 反转链表
    reversedHead = reverseList(head);

    // 显示反转后的链表
    printf("\n反转表：\n");
    displayList(reversedHead);

    // 释放链表内存
    struct link *tmp;
    while (reversedHead != NULL) {
        tmp = reversedHead;
        reversedHead = reversedHead->next;
        free(tmp);
    }

    return 0;
}

// 创建链表
struct link *createList() {
    struct link *head = NULL, *tail = NULL, *newNode;
    int value;

    while (1) {
        printf("结点值：");
        if (scanf("%d", &value) != 1) {
            break; // 非数字输入，结束链表创建
        }
        newNode = (struct link *)malloc(sizeof(struct link));
        if (newNode == NULL) {
            printf("内存分配失败\n");
            exit(1);
        }
        newNode->data = value;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode; // 新节点是链表的第一个节点
            tail = newNode; // 也是最后一个节点
        } else {
            tail->next = newNode; // 将新节点链接到链表的末尾
            tail = newNode; // 更新最后一个节点
        }
    }

    while (getchar() != '\n'); // 清除缓冲区
    return head;
}

// 显示链表
void displayList(struct link *head) {
    struct link *current = head;
    while (current != NULL) {
        printf("%4d", current->data);
        current = current->next;
    }
    printf("\n");
}

// 反转链表
struct link *reverseList(struct link *head) {
    struct link *prev = NULL, *current = head, *next = NULL;

    while (current != NULL) {
        next = current->next; // 保存下一个节点
        current->next = prev; // 反转指针
        prev = current; // 移动prev和current指针
        current = next;
    }
    return prev; // 新的头节点是原链表的尾节点
}

17:08 2024/12/29
/////判断输入
#include <stdio.h>

int main() {
    int x1, x2;
    do {
        printf("Input x1, x2:\n");
        if (scanf("%d,%d", &x1, &x2) != 2) {
            // 清除输入缓冲区中的非数字字符
            while (getchar() != '\n');
            continue;
        }
        // 清除输入缓冲区中的剩余字符
    } while (x1 * x2 >= 0); // 符号相同则继续循环
    printf("x1=%d,x2=%d\n", x1, x2);
    return 0;
}


23:15 2025/1/1
#include<stdio.h>
int main()
{
	int arr[3][4];
	for(int i=0;i<3;i++)
	{
		for(int j=0;j<4;j++)
		{
			arr[i][j]=i+j;
		}
	}
	int (*p)[4];
	p=arr;//&arr[0]
	for(int i=0;i<3;i++)
	{
		for(int j=0;j<4;j++)
		{
		
			printf("%d\t",  p[i][j]  );//表示解引用*（p+i）（即第i行）后j个sizeof(int)的地址
			//    p[i][j]   ,,,  *(p[i]+j)  ,,,  *(p+i)[j]  ,,  *(*(p+i)+j)
		}
		printf("\n");
	}
}

/*
#include<stdio.h>
int main()
{
	int arr[3][4];
	for(int i=0;i<3;i++)
	{
		for(int j=0;j<4;j++)
		{
			arr[i][j]=i+j;
		}
	}
	int *p;
	p=arr[0];//&arr[0][0]//&arr
	for(int i=0;i<3;i++)
	{
		for(int j=0;j<4;j++)
		{
		
			printf("%d\t",*(p+i*4+j));//列地址就是数据地址，解引用后就是数据
		}
		printf("\n");
	}
}*/



15:42 2025/1/25
string sa;
计算string类长度的计算方法
sa.size();

#include <iostream>
#include <string>
using namespace std;

int main() {
    string s;
    cin >> s; // 输入主字符串
    int num;
    cin >> num; // 输入要查找的子字符串数量
    int count;
    for (int i = 0; i < num; i++)
    {
        string st;
        cin >> st;
        int pos = 0;
        count = 0;
        for (int j = 0;; j++)
        {
            pos = s.find(st, pos);
            if (s.find(st, pos) != string::npos)
            {
                count++;
                pos += st.length();
            }
            else {
                break;
            }
        }
        cout << count << endl;
   }
    return 0;
}
15:29 2025/2/10
struct student{
	int sign;
	int yu;
	int shu;
	int ying;
	int sum;
}stu[300];

bool cmp(const student& a, const student& b) {
    if (a.sum != b.sum) {
        return a.sum > b.sum;
    } else if (a.yu != b.yu) {
        return a.yu > b.yu;
    } else {
        return a.sign < b.sign;
    }
}

17:49 2025/2/10
bool areEqual(double a, double b, double epsilon = 1e-9) {
    return abs(a - b) < epsilon;
}（（判断两个double类型的书是否相等


bool isprime(int number)
{
	if(number<2)
	{
		return false;
	}
	else{
		for(int j=2;j*j<number;j++)
		{
			if(number%j==0)
			{
				return false;
			}
		}
		return true;
	}
}

12:02 2025/2/18////在遍历的过程中更新最大值和最小值
class Solution {
public:
   int maxProfit(vector<int>& prices) {
       int pre = prices[0], ans = 0;
       for (int i = 0; i < prices.size(); i++) {
           ans = max(ans, prices[i] - pre);
           pre = min(pre, prices[i]);
       }
       return ans;
   }
};


22:34 2025/2/26
#include<iostream>。。。。///////看不懂的时候就看deepseek 中的解释
#include<vector>//////////////这里的return 时返回上一层循环！！！！！！！！！！！！！
using namespace std;
const int N = 100;
int r[N];
int max_profit(vector<int>& p, int n)
{
	int q;
	if (r[n] >= 0)
	{
		return r[n];
	}
	if (n == 0)
	{
		return 0;
	}
	else {
		q = -1;
		for (int i = 1; i <= n; i++)
		{
			q = max(q, p[i] + max_profit(p, n - i));//这里n-i将从新作为参数n传入函数然后再进入更深一层的循环，退出时是回到上一层循环
		}
	}
	r[n] = q;
	return q;//时返回上一层循环
}
int main()
{
	for (int i = 0; i < N; i++)
	{
		r[i] = -1;
	}
	vector<int>p(11);
	for (int i = 1; i <= 10; i++)
	{
		cin >> p[i];
	}
	int x;
	cin >> x;
	cout<< max_profit(p, x);
}
